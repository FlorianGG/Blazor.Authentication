@page "/pizzaDough"
@using Dtos
@inject DemoBlazorServer.Core.Abstractions.IPizzeria Pizzeria

<PageTitle>Management des pâtes à pizza</PageTitle>

<h1>Management des pâtes à pizza</h1>

<div class="row">
    <div class="col-6">
        <EditForm Model="@CurrentPizzaDough" OnValidSubmit="@SubmitForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="Name" class="form-label">Nom</label>
                <InputText id="Name" @bind-Value="CurrentPizzaDough.Name" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Valider</button>
        </EditForm>
    </div>
    <div class="col-6">
        @if (PizzaDoughs == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <GenericTable Items="@PizzaDoughs" Context="pizzaDough">
                <HeaderContent>
                    <tr>
                        <th>Nom</th>
                        <th>Actions</th>
                    </tr>
                </HeaderContent>
                <RowContent>
                    <tr>
                        <td>@pizzaDough.Name</td>
                        <td>
                            <div class="btn-group" role="group" aria-label="Basic example">
                                <button type="button"
                                        class="btn btn-danger"
                                        @onclick="@(() => DeletePizzaDough(pizzaDough.Id))">
                                    <span class="oi oi-trash" aria-hidden="true"></span>
                                </button>
                                <button type="button"
                                        class="btn btn-warning"
                                        @onclick="@(() => EditPizzaDough(pizzaDough.Id))">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </button>
                            </div>
                        </td>
                    </tr>
                </RowContent>
            </GenericTable>
        }
    </div>
</div>



@code {
    private IReadOnlyList<PizzaDoughModel>? PizzaDoughs { get; set; } = null;
    private PizzaDoughModel CurrentPizzaDough { get; set; } = new();


    protected override void OnInitialized()
    {
        PizzaDoughs = Pizzeria.GetPizzaDoughs();
    }

    private void SubmitForm()
    {
        if (PizzaDoughs == null)
            return;

        if (CurrentPizzaDough.Id != Guid.Empty)
        {
            var pizzaDoughToEdit = new PizzaDoughModel() { Id = CurrentPizzaDough.Id, Name = CurrentPizzaDough.Name };
            Pizzeria.EditPizzaDough(pizzaDoughToEdit);
        }
        else
        {
            var pizzaDoughToEdit = new PizzaDoughModel() { Id = Guid.NewGuid(), Name = CurrentPizzaDough.Name };
            Pizzeria.CreatePizzaDough(pizzaDoughToEdit);
        }
        CurrentPizzaDough = new();
    }

    private void DeletePizzaDough(Guid id)
    {
        Pizzeria.DeletePizzaDough(id);
    }

    private void EditPizzaDough(Guid id)
    {
        if (PizzaDoughs != null)
        {
            var pizzaToEdit = PizzaDoughs.First(pd => pd.Id == id);
            CurrentPizzaDough = new()
            {
                Id = pizzaToEdit.Id,
                Name = pizzaToEdit.Name
            };
        }

    }

}
